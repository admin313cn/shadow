buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            jcenter()
        }
    }

    dependencies {
//        classpath 'com.tencent.shadow.core:runtime'
//        classpath 'com.tencent.shadow.core:activity-container'
//        classpath 'com.tencent.shadow.core:gradle-plugin'
        classpath 'org.javassist:javassist:3.28.0-GA'
        classpath files('./lib/gradle-plugin.jar')
        classpath files('./lib/transform-kit.jar')
        classpath files('./lib/transform.jar')
        classpath files('./lib/manifest-parser.jar')
        classpath files('./lib/runtime.jar')
        classpath files('./lib/activity-container.jar')
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.tencent.shadow.plugin'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId 'com.tencent.shadow.sample.plugin.lib.base'
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

//            signingConfig signingConfigs.create("debug")
//            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }

    // 将插件applicationId设置为和宿主相同
    productFlavors {
        plugin {
            applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {

    implementation 'com.android.support:appcompat-v7:27.1.+'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
//    implementation project(path: ':runtime')
    testImplementation 'junit:junit:4.12'

    implementation 'com.zhy:okhttputils:2.6.2'
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.8'
    implementation 'com.github.zzz40500:android-shapeLoadingView:1.0.3.2'

    implementation 'com.squareup.okhttp3:okhttp:3.9.0'
    implementation 'com.balysv:material-ripple:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.github.bumptech.glide:glide:3.8.0'
    implementation 'cn.jzvd:jiaozivideoplayer:6.2.9'
    implementation 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    implementation 'com.arialyy.aria:core:3.8.12'
    annotationProcessor 'com.arialyy.aria:compiler:3.8.12'


    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    pluginCompileOnly files('./lib/runtime.jar')
}
